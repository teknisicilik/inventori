<?php
 namespace App\Services\NoAuth; use App\CoreService\CallService; use App\CoreService\CoreException; use App\Models\Users; use App\CoreService\CoreService; use App\Models\LandingConfigs; use App\Models\LandingImages; use App\Models\MobileAppVersions; use Illuminate\Support\Facades\Auth; use Illuminate\Support\Facades\Storage; use Illuminate\Support\Facades\Validator; class CustomAchievementForm extends CoreService { public $transaction = false; public $task = null; public function prepare($input) { $classModel = "\134\101\x70\160\134\x4d\x6f\x64\145\x6c\x73\x5c\101\x63\150\x69\x65\166\145\155\x65\156\x74\x73"; if ($classModel::FIELD_ARRAY) { foreach ($classModel::FIELD_ARRAY as $item) { $input[$item] = serialize($input[$item]); } } if ($classModel::FIELD_UPLOAD) { foreach ($classModel::FIELD_UPLOAD as $item) { if (isset($input[$item])) { if (is_array($input[$item])) { $input[$item] = isset($input[$item]["\160\x61\x74\150"]) ? $input[$item]["\x70\x61\x74\x68"] : $input[$item]["\146\151\x65\x6c\144\137\x76\x61\154\165\x65"]; } } } } $validation = Validator::make($input, $classModel::FIELD_VALIDATION); if ($validation->fails()) { throw new CoreException($validation->errors()->first()); } $input["\143\154\x61\163\163\x5f\x6d\x6f\x64\145\154"] = $classModel; return $input; } public function process($input, $originalInput) { $classModel = $input["\x63\x6c\141\163\x73\137\155\157\144\x65\x6c"]; $object = new $classModel(); foreach ($classModel::FIELD_ADD as $item) { if ($item == "\x63\x72\x65\141\x74\145\144\x5f\142\x79") { $input[$item] = Auth::id(); } if ($item == "\x75\160\x64\141\164\145\x64\x5f\x62\171") { $input[$item] = Auth::id(); } if (isset($input[$item])) { $inputValue = $input[$item] ?? $classModel::FIELD_DEFAULT_VALUE[$item]; $object->{$item} = $inputValue !== '' ? $inputValue : null; } } $object->save(); foreach ($classModel::FIELD_UPLOAD as $item) { $tmpPath = $input[$item] ?? null; if (!is_null($tmpPath)) { if (!Storage::exists($tmpPath)) { throw new CoreException(__("\x6d\145\163\x73\x61\147\x65\56\x74\x65\x6d\160\106\151\154\x65\x4e\157\x74\106\x6f\165\x6e\144", array("\146\151\145\x6c\144" => $item))); } $tmpPath = $input[$item]; $renamedFile = isset($input[$item . "\137\x72\x65\156\141\x6d\145\x64"]) ? $input[$item . "\137\x72\x65\156\x61\155\145\144"] : null; $originalname = pathinfo(storage_path($tmpPath), PATHINFO_FILENAME); if (isset($renamedFile)) { $originalname = $input[$item . "\137\x72\x65\156\141\x6d\x65\x64"]; } $ext = pathinfo(storage_path($tmpPath), PATHINFO_EXTENSION); $newPath = $classModel::FILEROOT . "\57" . $originalname . "\56" . $ext; if (Storage::exists($newPath)) { $id = 1; $filename = pathinfo(storage_path($newPath), PATHINFO_FILENAME); $ext = pathinfo(storage_path($newPath), PATHINFO_EXTENSION); while (true) { $originalname = $filename . "\50{$id}\51\x2e" . $ext; if (!Storage::exists($classModel::FILEROOT . "\x2f" . $originalname)) { break; } $id++; } $newPath = $classModel::FILEROOT . "\x2f" . $originalname; } $ext = pathinfo(storage_path($newPath), PATHINFO_EXTENSION); $object->{$item} = $newPath; Storage::move($tmpPath, $newPath); } } return array("\144\141\x74\141" => $object); } protected function validation() { return array(); } }