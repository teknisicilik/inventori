<?php
 namespace App\Services\Crud; use App\CoreService\CallService; use App\CoreService\CoreException; use App\CoreService\CoreService; use Illuminate\Support\Facades\Auth; use Illuminate\Support\Facades\DB; use Illuminate\Support\Facades\Validator; use Illuminate\Support\Str; use Illuminate\Support\Facades\Storage; use Illuminate\Support\Facades\URL; class Add extends CoreService { public $transaction = true; public $task = null; public function prepare($input) { $model = str_replace("\x5f", "\x2d", $input["\x6d\157\x64\145\154"]); $classModel = "\134\x41\x70\x70\x5c\115\157\x64\x65\154\x73\134" . Str::ucfirst(Str::camel($model)); $permission = "\143\162\145\141\x74\145\55" . $model; $authRoles = getRoleName(Auth::user()->role_id); if (!class_exists($classModel)) { throw new CoreException(__("\155\145\163\x73\141\x67\x65\56\x6d\157\x64\x65\154\x34\60\x34", array("\x6d\157\x64\145\154" => $model)), 404); } if (!$classModel::IS_ADD) { throw new CoreException("\x4e\x6f\x74\x20\146\157\165\156\x64", 404); } if (!hasPermission($permission)) { throw new CoreException(__("\155\145\163\x73\x61\147\x65\x2e\146\x6f\162\142\x69\x64\x64\145\x6e\x34\60\x33", array("\160\x65\x72\x6d\x69\x73\x73\x69\157\156" => $permission, "\162\x6f\154\145\x73" => $authRoles)), 403); } $input["\x63\154\x61\163\x73\137\155\157\x64\x65\x6c"] = $classModel; $input = $classModel::beforeInsert($input); if ($classModel::FIELD_ARRAY) { foreach ($classModel::FIELD_ARRAY as $item) { $input[$item] = serialize($input[$item]); } } if ($classModel::FIELD_UPLOAD) { foreach ($classModel::FIELD_UPLOAD as $item) { if (isset($input[$item])) { if (is_array($input[$item])) { $input[$item] = isset($input[$item]["\160\141\x74\150"]) ? $input[$item]["\160\x61\x74\x68"] : $input[$item]["\146\x69\145\154\x64\137\x76\x61\x6c\x75\145"]; } } } } $validator = Validator::make($input, $classModel::FIELD_VALIDATION); if ($validator->fails()) { throw new CoreException($validator->errors()->first()); } if ($classModel::FIELD_UNIQUE) { foreach ($classModel::FIELD_UNIQUE as $search) { $query = $classModel::whereRaw("\164\x72\165\x65"); $fieldTrans = array(); foreach ($search as $key) { if (isset($input[$key])) { $fieldTrans[] = __("\146\x69\145\x6c\x64\56{$key}"); $query->where($key, $input[$key]); } } $isi = $query->first(); if (!is_null($isi) and !empty($fieldTrans)) { throw new CoreException(__("\x6d\145\163\x73\x61\147\x65\x2e\141\154\x72\x65\x61\x64\171\x45\x78\151\163\164", array("\x66\151\145\154\x64" => implode("\54", $fieldTrans)))); } } } return $input; } public function process($input, $originalInput) { $response = array(); $classModel = $input["\143\x6c\141\x73\x73\137\x6d\x6f\x64\145\154"]; $object = new $classModel(); foreach ($classModel::FIELD_ADD as $item) { if ($item == "\x63\x72\145\141\164\x65\x64\137\142\171") { $input[$item] = Auth::id(); } if ($item == "\165\x70\144\x61\164\145\x64\x5f\x62\171") { $input[$item] = Auth::id(); } if (isset($input[$item])) { $inputValue = $input[$item] ?? $classModel::FIELD_DEFAULT_VALUE[$item]; $object->{$item} = $inputValue !== '' ? $inputValue : null; } } $object->save(); foreach ($classModel::FIELD_UPLOAD as $item) { $tmpPath = $input[$item] ?? null; if (!is_null($tmpPath)) { if (!Storage::exists($tmpPath)) { throw new CoreException(__("\155\145\x73\163\x61\x67\x65\56\164\145\x6d\160\106\151\154\x65\116\157\164\106\x6f\x75\156\x64", array("\146\x69\x65\x6c\x64" => $item))); } $tmpPath = $input[$item]; $renamedFile = isset($input[$item . "\x5f\162\x65\156\x61\x6d\145\x64"]) ? $input[$item . "\137\x72\145\156\141\x6d\x65\x64"] : null; $originalname = pathinfo(storage_path($tmpPath), PATHINFO_FILENAME); if (isset($renamedFile)) { $originalname = $input[$item . "\137\162\145\x6e\x61\155\x65\144"]; } $ext = pathinfo(storage_path($tmpPath), PATHINFO_EXTENSION); $newPath = $classModel::FILEROOT . "\x2f" . $originalname . "\56" . $ext; if (Storage::exists($newPath)) { $id = 1; $filename = pathinfo(storage_path($newPath), PATHINFO_FILENAME); $ext = pathinfo(storage_path($newPath), PATHINFO_EXTENSION); while (true) { $originalname = $filename . "\50{$id}\51\x2e" . $ext; if (!Storage::exists($classModel::FILEROOT . "\x2f" . $originalname)) { break; } $id++; } $newPath = $classModel::FILEROOT . "\x2f" . $originalname; } $ext = pathinfo(storage_path($newPath), PATHINFO_EXTENSION); $object->{$item} = $newPath; Storage::move($tmpPath, $newPath); } } $object->save(); $displayedDataAfterInsert["\151\144"] = $object->id; $displayedDataAfterInsert["\155\157\x64\x65\154"] = $classModel::TABLE; $displayedDataAfterInsert = CallService::run("\x46\x69\156\144", $displayedDataAfterInsert); if (isset($displayedDataAfterInsert->original["\144\141\x74\x61"])) { $displayedDataAfterInsert = $displayedDataAfterInsert->original["\144\x61\164\141"]; } else { $displayedDataAfterInsert = $displayedDataAfterInsert->original; throw new CoreException($displayedDataAfterInsert, 500); } $afterInsertedRespnese = $classModel::afterInsert($displayedDataAfterInsert, $input); foreach ($classModel::CHILD_TABLE as $keyItem => $valItem) { $childModuleName = "\x63\x68\x69\154\144\x5f\144\x61\164\141\x5f" . $keyItem; $foreignFieldName = $valItem["\x66\157\162\145\x69\147\156\x46\x69\x65\x6c\144"]; if (isset($input[$childModuleName])) { foreach ($input[$childModuleName] as $childItem) { $childItem["\x6d\157\x64\145\154"] = $keyItem; $childItem[$foreignFieldName] = $object->id; $childDataInserted = CallService::run("\101\144\x64", $childItem); } } } $response["\144\x61\x74\141"] = $displayedDataAfterInsert; $response["\141\x66\x74\x65\162\x5f\151\x6e\163\x65\x72\x74\x65\x64\x5f\x72\x65\163\x70\157\x6e\163\x65"] = $afterInsertedRespnese; $response["\155\145\163\163\141\x67\145"] = __("\x6d\145\x73\x73\x61\147\x65\56\163\165\x63\x63\145\163\x73\146\x75\x6c\154\171\101\144\144"); return $response; } protected function validation() { return array(); } }
