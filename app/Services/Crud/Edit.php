<?php
 namespace App\Services\Crud; use App\CoreService\CallService; use App\CoreService\CoreException; use App\CoreService\CoreService; use Illuminate\Support\Facades\Auth; use Illuminate\Support\Facades\DB; use Illuminate\Support\Facades\Storage; use Illuminate\Support\Facades\URL; use Illuminate\Support\Facades\Validator; use Illuminate\Support\Str; class Edit extends CoreService { public $transaction = true; public $task = null; public function prepare($input) { $model = str_replace("\137", "\55", $input["\x6d\x6f\x64\x65\x6c"]); $classModel = "\x5c\101\160\160\x5c\x4d\157\144\x65\154\x73\x5c" . Str::ucfirst(Str::camel($model)); if (!class_exists($classModel)) { throw new CoreException(__("\155\x65\x73\163\141\x67\x65\x2e\155\x6f\x64\x65\x6c\64\60\64", array("\x6d\157\x64\x65\154" => $model)), 404); } if (!$classModel::IS_EDIT) { throw new CoreException("\116\157\164\x20\146\157\165\x6e\x64", 404); } if (!hasPermission("\165\160\144\x61\164\145\x2d" . $model)) { throw new CoreException("\x46\x6f\162\142\151\x64\x64\x65\x6e", 403); } $input["\143\x6c\x61\x73\x73\137\x6d\x6f\144\145\154"] = $classModel; return $input; } public function process($input, $originalInput) { $classModel = $input["\x63\154\x61\163\163\137\x6d\157\x64\x65\x6c"]; $object = $classModel::find($input["\151\x64"]); if (!$object) { throw new CoreException(__("\x6d\145\x73\x73\x61\147\x65\56\144\x61\164\x61\116\x6f\164\x46\157\x75\x6e\x64", array("\151\144" => $input["\x69\x64"]))); } $rules = $classModel::FIELD_VALIDATION; $rules["\x69\x64"] = "\x72\x65\x71\x75\151\x72\x65\x64\174\x69\x6e\x74\145\147\x65\162"; if ($classModel::FIELD_ARRAY) { foreach ($classModel::FIELD_ARRAY as $item) { $input[$item] = serialize($input[$item]); } } foreach ($classModel::FIELD_UPLOAD as $item) { if (array_key_exists($item, $input)) { if (is_array($input[$item])) { $input[$item] = isset($input[$item]["\160\x61\x74\150"]) ? $input[$item]["\x70\141\164\150"] : $input[$item]["\146\151\x65\x6c\x64\x5f\166\x61\154\165\145"]; } } } $validator = Validator::make($input, $rules); if ($validator->fails()) { throw new CoreException($validator->errors()->first()); } $validator = Validator::make($input, $classModel::FIELD_VALIDATION); if ($validator->fails()) { throw new CoreException($validator->errors()->first()); } if ($classModel::FIELD_UNIQUE) { foreach ($classModel::FIELD_UNIQUE as $search) { $query = $classModel::whereRaw("\x74\162\165\145"); $fieldTrans = array(); $uniqueChange = false; foreach ($search as $key) { if ($input[$key] != $object->{$key}) { $uniqueChange = true; } $fieldTrans[] = __("\146\151\x65\x6c\144\56{$key}"); $query->where($key, $input[$key]); } if ($uniqueChange) { $isi = $query->first(); if (!is_null($isi)) { throw new CoreException(__("\x6d\x65\163\x73\x61\147\145\x2e\x61\x6c\x72\x65\141\144\171\105\x78\151\x73\164", array("\x66\x69\145\x6c\x64" => implode("\x2c", $fieldTrans)))); } } } } $input = $classModel::beforeUpdate($input); foreach ($classModel::FIELD_UPLOAD as $item) { if (is_null($input[$item])) { $object->{$item} = null; } else { if ($object->{$item} !== $input[$item]) { $tmpPath = $input[$item] ?? null; if (!is_null($tmpPath)) { if (!Storage::exists($tmpPath)) { throw new CoreException(__("\155\x65\x73\163\x61\147\x65\x2e\x74\145\155\160\106\151\x6c\x65\x4e\x6f\x74\106\157\165\156\x64", array("\146\151\145\154\x64" => $item))); } $tmpPath = $input[$item] ?? null; $originalname = pathinfo(storage_path($tmpPath), PATHINFO_FILENAME); $ext = pathinfo(storage_path($tmpPath), PATHINFO_EXTENSION); $newPath = $classModel::FILEROOT . "\57" . $originalname . "\56" . $ext; if (Storage::exists($newPath)) { $id = 1; $filename = pathinfo(storage_path($newPath), PATHINFO_FILENAME); $ext = pathinfo(storage_path($newPath), PATHINFO_EXTENSION); while (true) { $originalname = $filename . "\x28{$id}\x29\x2e" . $ext; if (!Storage::exists($classModel::FILEROOT . "\57" . $originalname)) { break; } $id++; } $newPath = $classModel::FILEROOT . "\57" . $originalname; } $oldFilePath = $object->{$item}; Storage::delete($oldFilePath); $object->{$item} = $newPath; Storage::move($tmpPath, $newPath); } else { $oldFilePath = $object->{$item}; Storage::delete($oldFilePath); } } } } foreach ($classModel::FIELD_EDIT as $item) { if ($item == "\x75\160\x64\x61\164\x65\x64\137\x62\x79") { $input[$item] = Auth::id(); } if (array_key_exists($item, $input)) { if (!in_array($item, $classModel::FIELD_UPLOAD)) { $inputValue = $input[$item]; $object->{$item} = $inputValue !== '' ? $inputValue : null; } } } $object->save(); if (!empty($classModel::FIELD_UPLOAD)) { foreach ($classModel::FIELD_UPLOAD as $item) { if ((preg_match("\x2f\146\151\154\x65\137\57\151", $item) or preg_match("\x2f\x69\x6d\x67\x5f\57\151", $item)) and !is_null($object->{$item})) { $url = URL::to("\141\x70\151\57\146\151\x6c\145\x2f" . $classModel::TABLE . "\57" . $item . "\x2f" . $object->id . "\57" . time()); $tumbnailUrl = URL::to("\x61\160\151\x2f\x74\165\x6d\142\55\146\151\x6c\x65\57" . $classModel::TABLE . "\x2f" . $item . "\57" . $object->id . "\57" . time()); $ext = pathinfo($object->{$item}, PATHINFO_EXTENSION); $filename = pathinfo(storage_path($object->{$item}), PATHINFO_BASENAME); $object->{$item} = (object) array("\x65\x78\164" => is_null($object->{$item}) ? null : $ext, "\165\162\x6c" => $url, "\x74\x75\155\142\156\x61\x69\154\137\x75\x72\154" => $tumbnailUrl, "\x66\151\x6c\x65\x6e\x61\155\x65" => is_null($object->{$item}) ? null : $filename, "\x66\151\145\x6c\x64\x5f\x76\x61\154\165\x65" => $object->{$item}); } } } $afterUpdatedRespnese = $classModel::afterUpdate($object, $input); foreach ($classModel::CHILD_TABLE as $keyItem => $valItem) { $childModuleName = "\x63\x68\x69\x6c\x64\137\144\141\x74\141\137" . $keyItem; $foreignFieldName = $valItem["\146\157\x72\145\151\x67\x6e\x46\151\x65\x6c\x64"]; if (isset($input[$childModuleName])) { foreach ($input[$childModuleName] as $childItem) { if (isset($childItem["\x69\x64"])) { if (isset($childItem["\x61\143\164\137\x74\x79\x70\x65"])) { if ($childItem["\141\x63\164\137\x74\x79\x70\145"] == "\144\145\x6c\145\x74\x65\x64") { $childItem["\x6d\x6f\x64\145\x6c"] = $keyItem; $childItem[$foreignFieldName] = $object->id; $childDataDeleted = CallService::run("\x44\x65\154\x65\164\145", $childItem); } else { if ($childItem["\141\x63\x74\x5f\164\171\x70\145"] == "\165\x70\x64\141\x74\x65\144") { $childItem["\155\157\x64\x65\154"] = $keyItem; $childItem[$foreignFieldName] = $object->id; $childDataUpdated = CallService::run("\x45\144\x69\x74", $childItem); } } } } else { $childItem["\155\157\144\145\x6c"] = $keyItem; $childItem[$foreignFieldName] = $object->id; $childDataInserted = CallService::run("\x41\144\x64", $childItem); } } } } return array("\x64\x61\x74\141" => $object, "\x61\x66\x74\145\x72\x5f\x75\x70\x64\141\x74\145\144\137\x72\145\163\160\x6f\156\163\145" => $afterUpdatedRespnese, "\155\145\163\x73\x61\x67\145" => __("\155\145\x73\x73\x61\x67\x65\x2e\x73\165\x63\x63\145\x73\146\165\x6c\154\171\x55\160\x64\x61\164\145")); } protected function validation() { return array(); } }